import numpy
import torch
import random
import torchvision
import torchvision.transforms as transforms

from dataset.fake_human.abstract_fake_human_dataset import AbstractFakeHumanDataset


class Cifar10FakeHumanDataset(AbstractFakeHumanDataset):

    def __init__(self, x_labeled, y_labeled, total_labeled_samples_size=0, total_unlabeled_samples_size=0, batch_size=32):
        self.batch_size = batch_size
        if x_labeled is None or y_labeled is None:
            transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
            dataset_train = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
            dataset_test = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
            x_labeled = []
            y_labeled = []
            x_unlabeled = []
            y_unlabeled = []
            x_metric = []
            y_metric = []
            x_dataset = []
            y_dataset = []
            for i, data in enumerate(dataset_train):
                image, label = data
                x_dataset.append(image)
                y_dataset.append(label)

            map_dataset = list(zip(x_dataset, y_dataset))
            random.shuffle(map_dataset)
            x_dataset, y_dataset = zip(*map_dataset) 
            for i in range(total_labeled_samples_size + total_unlabeled_samples_size):
                if i < total_labeled_samples_size:
                    x_labeled.append(x_dataset[i])
                    y_labeled.append(y_dataset[i])

                elif total_labeled_samples_size < i < total_labeled_samples_size + total_unlabeled_samples_size:
                    x_unlabeled.append(torch.reshape(x_dataset[i], (1, 3, 32, 32)))
                    y_unlabeled.append(torch.from_numpy(numpy.array([y_dataset[i]])))    
            
            for i, data in enumerate(dataset_test):
                image, label = data
                x_metric.append(image)
                y_metric.append(label)

            super().__init__(x_labeled, y_labeled, x_unlabeled, y_unlabeled, x_metric, y_metric, batch_size)

        else:
            x = []
            y = []
            for i in range(len(x_labeled)):
                x.append(torch.reshape(x_labeled[i], (3, 32, 32)))
                y.append(y_labeled[i][0])

            super().__init__(x, y, batch_size=batch_size)

    def add_samples(self, x, y):
        reshaped_x = []
        reshaped_y = []
        for i in range(len(x)):
            reshaped_x.append(torch.reshape(x[i], (3, 32, 32)))
            reshaped_y.append(y[i][0])

        super().add_samples(reshaped_x, reshaped_y)
