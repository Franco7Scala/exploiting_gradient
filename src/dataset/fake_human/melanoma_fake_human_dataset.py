import numpy
import pandas
import torch
import random
import torchvision
import torchvision.transforms as transforms
from PIL.Image import Image

from dataset.fake_human.abstract_fake_human_dataset import AbstractFakeHumanDataset


class MelanomaFakeHumanDataset(AbstractFakeHumanDataset):

    def __init__(self, total_labeled_samples_size=0, total_unlabeled_samples_size=0, batch_size=32):
        self.batch_size = batch_size
        self.base_path = "./data/melanoma/"
        dataset_train = pandas.read_csv("{}train.csv".format(self.base_path), usecols=["image_name", "target"])
        dataset_test = pandas.read_csv("{}test.csv".format(self.base_path), usecols=["image_name", "target"])
        x_labeled = []
        y_labeled = []
        x_unlabeled = []
        y_unlabeled = []
        x_metric = []
        y_metric = []
        x_dataset = []
        y_dataset = []
        for image, label in dataset_train.iterrows():
            x_dataset.append(image)
            y_dataset.append(label)

        map_dataset = list(zip(x_dataset, y_dataset))
        random.shuffle(map_dataset)
        x_dataset, y_dataset = zip(*map_dataset)
        for i in range(total_labeled_samples_size + total_unlabeled_samples_size):
            if i < total_labeled_samples_size:
                x_labeled.append(x_dataset[i])
                y_labeled.append(y_dataset[i])

            elif total_labeled_samples_size < i < total_labeled_samples_size + total_unlabeled_samples_size:
                x_unlabeled.append(x_dataset[i])
                y_unlabeled.append(y_dataset[i])

        for image, label in dataset_test.iterrows():
            x_dataset.append(image)
            y_dataset.append(label)

        super().__init__(x_labeled, y_labeled, x_unlabeled, y_unlabeled, x_metric, y_metric, batch_size)

    def __getitem__(self, index):
        image = Image.open(self.base_path + "jpeg/train/" + self.x[index] + ".jpg")
        if not image.is_valid():
            image = Image.open(self.base_path + "jpeg/test/" + self.x[index] + ".jpg")

        return {"x": image, "y": self.y[index]}

    def add_samples(self, x, y):
        reshaped_x = []
        reshaped_y = []
        for i in range(len(x)):
            reshaped_x.append(x)
            reshaped_y.append(y)

        super().add_samples(reshaped_x, reshaped_y)
