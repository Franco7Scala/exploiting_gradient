import torch

from dataset.fake_human.abstract_fake_human_dataset import AbstractFakeHumanDataset


class TestFakeHumanDataset(AbstractFakeHumanDataset):

    def __init__(self, x, y, batch_size, total_labeled_samples_size=0, total_unlabeled_samples_size=0, input_size=0, output_size=0, metric_size = 0):
        self.batch_size = batch_size
        if x is None or y is None:
            inputs = torch.randn(total_labeled_samples_size, input_size)
            outputs = torch.randn(total_labeled_samples_size, output_size)
            # human
            x_unlabeled = torch.randn(total_unlabeled_samples_size, input_size)
            y_unlabeled = torch.randn(total_unlabeled_samples_size, output_size)
            iterator = zip(x_unlabeled, y_unlabeled)
            self.unlabeled_elements = dict(iterator)
            # for metrics
            x_metric = torch.randn(metric_size, input_size)
            y_metric = torch.randn(metric_size, output_size)

        else:
            unlabeled_elements = None

        super(TestFakeHumanDataset, self, inputs, outputs, batch_size, unlabeled_elements, x_metric, y_metric).__init__()
