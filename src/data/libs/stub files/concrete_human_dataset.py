from dataset.abstract_human_dataset import AbstractHumanDataset
from torch.utils.data.dataloader import DataLoader

_delegate = None


class ConcreteHumanDataset(AbstractHumanDataset):

    def __init__(self, delegate):
        global _delegate
        _delegate = delegate    # use it if you want to call the human to annotate the sample
        self.batch_size = -1    # to be defined here
        x_labeled = []          # x labeled samples (training set)
        y_labeled = []          # y labeled samples (training set)
        x_metric = []           # x labeled samples (test set)
        y_metric = []           # y labeled samples (test set)
        x_unlabeled = []        # x unlabeled samples (samples to be annotated)
        y_unlabeled = []        # 7 unlabeled samples (samples to be annotated)
        super().__init__(x_labeled, y_labeled, x_unlabeled, y_unlabeled, x_metric, y_metric, self.batch_size)

    def __getitem__(self, index):
        return {"x": self.x[index], "y": self.y[index]}     # to edit if the data should be loaded

    def annotate(self, x_to_label):
        x_annotated = []        # annotate the samples and return them
        y_annotated = []
        return x_annotated, y_annotated

    def convert_sample(self, x, y=None):
        return x, y     # implement if the data should be converted

    # not editable

    def get_metrics_dataloader(self):
        dataset = ConcreteHumanDataset(self.base_path, _delegate)
        dataset.add_samples(self.x_metric, self.y_metric)
        return DataLoader(dataset, batch_size=self.batch_size)

    def add_samples(self, x, y):
        reshaped_x = []
        reshaped_y = []
        for i in range(len(x)):
            reshaped_x.append(x[i])
            reshaped_y.append(y[i])

        super().add_samples(reshaped_x, reshaped_y)
