import Augmentor
import pandas
import shutil
import os

from os import listdir
from os.path import isfile, join
from os import path
from pathlib import Path
from support import cprint, Color

base_path = "./data/melanoma"
quantity_copies = 5000

# Base parameters
cprint("Setting base parameters...", Color.BLUE)
images_path = "{}/jpeg/train".format(base_path)
created_samples_path = "{}/created_samples".format(images_path)
output_created_samples_path = "{}/output".format(created_samples_path)
csv_file_path = "{}/train.csv".format(base_path)

# Setting environment
cprint("Setting environment...", Color.BLUE)
if not path.exists(created_samples_path):
    os.mkdir(created_samples_path)

# Copying samples in a new directory to multiply them (only class 1)
cprint("Copying images to be 'augmented'...", Color.BLUE)
dataset_train = pandas.read_csv(csv_file_path, usecols=["image_name", "target"])
x_dataset = []
y_dataset = []
for value in dataset_train.iterrows():
    x_dataset.append(value[1][0])
    y_dataset.append(int(value[1][1]))

for i in range(len(x_dataset)):
    if y_dataset[i] == 1:
        shutil.copyfile("{}/{}.jpg".format(images_path, x_dataset[i]), "{}/{}.jpg".format(created_samples_path, x_dataset[i]))

# Augmenting images in that folder
cprint("Augmenting images...", Color.BLUE)
augmentor = Augmentor.Pipeline(created_samples_path)
augmentor.flip_left_right(0.5)
augmentor.rotate(0.3, 10, 10)
augmentor.skew(0.4, 0.5)
augmentor.zoom(probability=0.2, min_factor=1.1, max_factor=1.5)
augmentor.sample(quantity_copies)

# Adding datas to the csv
cprint("Adding datas to the csv...", Color.BLUE)
all_images = [f for f in listdir(output_created_samples_path) if isfile(join(output_created_samples_path, f))]
with open(csv_file_path, 'a') as fd:
    for image_path in all_images:
        name_image = Path(image_path).stem
        fd.write("{},xxx,xxx,0,xxx,xxx,xxx,1\n".format(name_image))

# Moving copies in folder with other images
cprint("Moving images with other...", Color.BLUE)
all_files = os.listdir(output_created_samples_path)
for g in all_files:
    shutil.move("{}/{}".format(output_created_samples_path, g), images_path)

# Cleaning
cprint("Deleting unnecessary files...", Color.BLUE)
shutil.rmtree(created_samples_path)

cprint("Completed!", Color.PINK)
