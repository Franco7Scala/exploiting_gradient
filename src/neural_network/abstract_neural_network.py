import numpy
import torch.nn as nn


class AbstractNeuralNetwork(nn.Module):

    def __init__(self):
        super(AbstractNeuralNetwork, self).__init__()
        self.optimizer = None
        self.criterion = None

    def forward(self, x):
        pass

    def _get_gradient(self):
        pass

    def fit(self, dataloader, epochs):
        for epoch in range(epochs):
            dataiter = iter(dataloader)
            for batch in dataiter:
                self.optimizer.zero_grad()
                output = self(batch["x"])
                loss = self.criterion(output, batch["y"])
                loss.backward()
                # updating nn weights
                self.optimizer.step()

    def get_loss(self, dataloader):
        losses = []
        dataiter = iter(dataloader)
        for batch in dataiter:
            self.optimizer.zero_grad()
            output = self(batch["x"])
            losses.append(self.criterion(output, batch["y"]).data)

        return numpy.average(losses)

    # calculate the gradient for an input example
    def extrapolate_single_gradient(self, input, output):
        self.optimizer.zero_grad()
        if type(input) is list:
            for i in range(0, len(input)):
                calculated_output = self(input[i])
                loss = self.criterion(output[i], calculated_output)
                loss.backward()

        else:
            calculated_output = self(input)
            loss = self.criterion(output, calculated_output)
            loss.backward()

        return self._get_gradient()

    # calculate the gradient for a batch (annotated_x) w / one-leave-out (example with hinge index)
    def extrapolate_other_gradient(self, inputs, outputs, hinge):
        excluded_x = inputs.pop(hinge)
        excluded_y = outputs.pop(hinge)
        inputs = inputs
        outputs = outputs
        self.optimizer.zero_grad()
        if type(inputs) is list:
            for i in range(0, len(inputs)):
                calculated_output = self(inputs[i])
                loss = self.criterion(outputs[i], calculated_output)
                loss.backward()

        else:
            calculated_output = self(inputs)
            loss = self.criterion(outputs, calculated_output)
            loss.backward()

        inputs.insert(hinge, excluded_x)
        outputs.insert(hinge, excluded_y)
        # taking distance for each sample
        return self._get_gradient()
