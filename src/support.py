import pickle
import sys
import time

from enum import Enum


class Color(Enum):
    YELLOW = 1
    BLUE = 2
    GREEN = 3
    LIGHT_GREEN = 4
    RED = 5
    LIGHT_MAGENTA = 6
    PINK = 7
    NONE = 8


_time = 0
_called = False
_folder_state = "./data/saved_state"
_print_delegate = None


def cprint(text, color = Color.NONE, loggable = False):
    global _print_delegate
    global _called
    global _time
    if not _called:
        _called = True
        _time = int(round(time.time() * 1000))

    if color == Color.YELLOW:
        code_color = "\033[93m"

    elif color == Color.BLUE:
        code_color = "\033[94m"

    elif color == Color.GREEN:
        code_color = "\033[32m"

    elif color == Color.LIGHT_GREEN:
        code_color = "\033[92m"

    elif color == Color.RED:
        code_color = "\033[91m"

    elif color == Color.LIGHT_MAGENTA:
        code_color = "\033[95m"

    elif color == Color.PINK:
        code_color = "\033[95m"

    else:
        code_color = "\033[0m"

    if loggable:
        path = "./data/log/log_{}.txt".format(_time)
        file = open(path, "a+")
        file.write(text + "\n")
        file.close()

    if _print_delegate is None:
        print(code_color + str(text) + "\033[0m")

    else:
        _print_delegate.print_message(str(text))


def print_progress_bar(iteration, total, prefix='', suffix='', decimals=1, length=100, fill='â–ˆ'):
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filled_length = int(length * iteration // total)
    bar = fill * filled_length + '-' * (length - filled_length)
    sys.stdout.write('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix))
    if iteration == total:
        print("")


def save_state(technique, quantity_samples_to_select, training_epochs, active_epochs, model, neural_network, dataset_fake_human, dataset_selector, current_active_epoch, just_annotated_x, just_annotated_y, start_loss, start_accuracy, elapsed_time, features_extractor):
    _save_variable(technique, "technique")
    _save_variable(quantity_samples_to_select, "quantity_samples_to_select")
    _save_variable(training_epochs, "training_epochs")
    _save_variable(active_epochs, "active_epochs")
    _save_variable(model, "model")
    _save_variable(neural_network, "neural_network")
    _save_variable(dataset_fake_human, "dataset_fake_human")
    _save_variable(dataset_selector, "dataset_selector")
    _save_variable(current_active_epoch, "current_active_epoch")
    _save_variable(just_annotated_x, "just_annotated_x")
    _save_variable(just_annotated_y, "just_annotated_y")
    _save_variable(start_loss, "start_loss")
    _save_variable(start_accuracy, "start_accuracy")
    _save_variable(start_accuracy, "elapsed_time")
    _save_variable(features_extractor, "features_extractor")
    _save_variable(_time, "_time")
    current_time = time.time()
    _save_variable(current_time, "current_time")


def _save_variable(variable, name):
    binary_file = open("{}/backup_{}.bin".format(_folder_state, name), mode="wb")
    pickle.dump(variable, binary_file)
    binary_file.close()


def load_state():
    global _called
    global _time
    _called = True
    _time = _load_variable("_time")

    return _load_variable("technique"),\
           _load_variable("quantity_samples_to_select"),\
           _load_variable("training_epochs"),\
           _load_variable("active_epochs"),\
           _load_variable("model"),\
           _load_variable("neural_network"),\
           _load_variable("dataset_fake_human"),\
           _load_variable("dataset_selector"),\
           _load_variable("current_active_epoch"),\
           _load_variable("current_time"),\
           _load_variable("just_annotated_x"),\
           _load_variable("just_annotated_y"),\
           _load_variable("start_loss"),\
           _load_variable("start_accuracy"), \
           _load_variable("elapsed_time"),\
           _load_variable("features_extractor")


def _load_variable(variable_name):
    binary_file = open("{}/backup_{}.bin".format(_folder_state, variable_name), mode="rb")
    return pickle.load(binary_file)


def parse_bool(value):
   return str(value).lower() in ("yes", "true", "t", "1")
