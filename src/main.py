# -*- coding: utf-8 -*-
import torch
from src.small_neural_network import SmallNeuralNetwork


batch_size, input_size, hidden_size, output_size = 64, 1000, 100, 10
x = torch.randn(batch_size, input_size)
y = torch.randn(batch_size, output_size)
model = SmallNeuralNetwork(input_size, hidden_size, output_size)
criterion = torch.nn.MSELoss(reduction='sum')
optimizer = torch.optim.SGD(model.parameters(), lr=1e-4)
for t in range(500):
    y_pred = model(x)
    loss = criterion(y_pred, y)
    if t % 100 == 99:
        print(t, loss.item())

    optimizer.zero_grad()
    loss.backward()
    print(model.linear_1.weight.grad)
    print(model.linear_2.weight.grad)
    optimizer.step()
