import numpy
import torch.nn as nn


class NeuralNetwork(nn.Module):

    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.optimizer = None
        self.criterion = None
        # building nn
        self.conv_layer = nn.Sequential(
            # Conv Layer block 1
            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            # Conv Layer block 2
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            nn.Dropout2d(p=0.05),
            # Conv Layer block 3
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
        )
        self.fc_layer = nn.Sequential(
            nn.Dropout(p=0.1),
            nn.Linear(4096, 1024),
            nn.ReLU(inplace=True),
            nn.Linear(1024, 512),
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.1),
            nn.Linear(512, 10)
        )

    def forward(self, x):
        x = self.conv_layer(x)
        x = x.view(x.size(0), -1)
        x = self.fc_layer(x)
        return x

    def _get_gradient(self):
        return numpy.append(self.layer[0].weight.grad[2].numpy(),
                            self.layer[0].weight.grad[4].numpy(),
                            self.layer[0].weight.grad[8].numpy(),
                            self.layer[0].weight.grad[10].numpy(),
                            self.layer[0].weight.grad[15].numpy(),
                            self.layer[0].weight.grad[17].numpy())

    def fit(self, dataloader, epochs):
        for epoch in range(epochs):
            dataiter = iter(dataloader)
            for batch in dataiter:
                self.optimizer.zero_grad()
                output = self(batch["x"])
                loss = self.criterion(output, batch["y"])
                loss.backward()
                # updating nn weights
                self.optimizer.step()

    def get_loss(self, dataloader):
        losses = []
        dataiter = iter(dataloader)
        for batch in dataiter:
            self.optimizer.zero_grad()
            output = self(batch["x"])
            losses.append(self.criterion(output, batch["y"]).data)

        return numpy.average(losses)

    # calculate the gradient for an input example
    def extrapolate_single_gradient(self, input, output):
        self.optimizer.zero_grad()
        if type(input) is list:
            for i in range(0, len(input)):
                calculated_output = self(input[i])
                loss = self.criterion(output[i], calculated_output)
                loss.backward()

        else:
            calculated_output = self(input)
            loss = self.criterion(output, calculated_output)
            loss.backward()

        return self._get_gradient()

    # calculate the gradient for a batch (annotated_x) w / one-leave-out (example with hinge index)
    def extrapolate_other_gradient(self, inputs, outputs, hinge):
        excluded_x = inputs.pop(hinge)
        excluded_y = outputs.pop(hinge)
        inputs = inputs
        outputs = outputs
        self.optimizer.zero_grad()
        if type(inputs) is list:
            for i in range(0, len(inputs)):
                calculated_output = self(inputs[i])
                loss = self.criterion(outputs[i], calculated_output)
                loss.backward()

        else:
            calculated_output = self(inputs)
            loss = self.criterion(outputs, calculated_output)
            loss.backward()

        inputs.insert(hinge, excluded_x)
        outputs.insert(hinge, excluded_y)
        # taking distance for each sample
        return self._get_gradient()
