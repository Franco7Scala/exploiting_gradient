import torch
import warnings
import time

from dataset.fake_human.melanoma_fake_human_dataset import MelanomaFakeHumanDataset
from support import cprint, Color
from neural_network.convolutional_melanoma_neural_network import ConvolutionalMelanomaNeuralNetwork

warnings.filterwarnings("ignore", category=UserWarning)


# setting device
device = "cuda" if torch.cuda.is_available() else "cpu"
cprint("Running on {}...".format(device), Color.BLUE)

# defining fixed parameters
training_set_size = 10000 #TODO
test_set_size = 900 #TODO
training_epochs = 100

# defining base parameters (neural network)
batch_size = 8 #TODO
input_size = 512 * 512 * 3
output_size = 1

# defining Neural Network
neural_network = ConvolutionalMelanomaNeuralNetwork(device)
neural_network.criterion = torch.nn.MSELoss()
neural_network.optimizer = torch.optim.Adam(neural_network.parameters(), lr=1e-4, weight_decay=5e-4)

# defining dataset
dataset_fake_human = MelanomaFakeHumanDataset(training_set_size, 0, test_set_size, batch_size)

# making training
cprint("Training neural network...", Color.GREEN)
start_time = time.time()
neural_network.fit(dataset_fake_human.get_dataloader(), training_epochs)
loss, accuracy = neural_network.get_statistics(dataset_fake_human.get_metrics_dataloader())
end_time = time.time()

# printing and saving results
cprint("Neural network training time: {}".format(end_time - start_time), Color.LIGHT_MAGENTA, loggable = True)
cprint("Loss after training: {}".format(loss), Color.LIGHT_MAGENTA, loggable = True)
cprint("Accuracy after training: {}".format(accuracy), Color.LIGHT_MAGENTA, loggable = True)
cprint("Saving neural network...", Color.GREEN)
neural_network.save("./data/networks/cnn_melanoma_simple_train.net")

cprint("Completed!", Color.YELLOW)
